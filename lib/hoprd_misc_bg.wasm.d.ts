/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function parse_private_key(a: number, b: number, c: number): void;
export function __wbg_cliargs_free(a: number): void;
export function __wbg_get_cliargs_network(a: number, b: number): void;
export function __wbg_set_cliargs_network(a: number, b: number, c: number): void;
export function __wbg_get_cliargs_identity(a: number, b: number): void;
export function __wbg_set_cliargs_identity(a: number, b: number, c: number): void;
export function __wbg_get_cliargs_data(a: number, b: number): void;
export function __wbg_set_cliargs_data(a: number, b: number, c: number): void;
export function __wbg_get_cliargs_host(a: number): number;
export function __wbg_set_cliargs_host(a: number, b: number): void;
export function __wbg_get_cliargs_announce(a: number): number;
export function __wbg_set_cliargs_announce(a: number, b: number): void;
export function __wbg_get_cliargs_api(a: number): number;
export function __wbg_set_cliargs_api(a: number, b: number): void;
export function __wbg_get_cliargs_api_host(a: number, b: number): void;
export function __wbg_set_cliargs_api_host(a: number, b: number, c: number): void;
export function __wbg_get_cliargs_api_port(a: number): number;
export function __wbg_set_cliargs_api_port(a: number, b: number): void;
export function __wbg_get_cliargs_disable_api_authentication(a: number): number;
export function __wbg_set_cliargs_disable_api_authentication(a: number, b: number): void;
export function __wbg_get_cliargs_api_token(a: number, b: number): void;
export function __wbg_set_cliargs_api_token(a: number, b: number, c: number): void;
export function __wbg_get_cliargs_health_check(a: number): number;
export function __wbg_set_cliargs_health_check(a: number, b: number): void;
export function __wbg_get_cliargs_health_check_host(a: number, b: number): void;
export function __wbg_set_cliargs_health_check_host(a: number, b: number, c: number): void;
export function __wbg_get_cliargs_health_check_port(a: number): number;
export function __wbg_set_cliargs_health_check_port(a: number, b: number): void;
export function __wbg_get_cliargs_password(a: number, b: number): void;
export function __wbg_set_cliargs_password(a: number, b: number, c: number): void;
export function __wbg_get_cliargs_default_strategy(a: number, b: number): void;
export function __wbg_set_cliargs_default_strategy(a: number, b: number, c: number): void;
export function __wbg_get_cliargs_max_auto_channels(a: number, b: number): void;
export function __wbg_set_cliargs_max_auto_channels(a: number, b: number, c: number): void;
export function __wbg_get_cliargs_auto_redeem_tickets(a: number): number;
export function __wbg_set_cliargs_auto_redeem_tickets(a: number, b: number): void;
export function __wbg_get_cliargs_check_unrealized_balance(a: number): number;
export function __wbg_set_cliargs_check_unrealized_balance(a: number, b: number): void;
export function __wbg_get_cliargs_provider(a: number, b: number): void;
export function __wbg_set_cliargs_provider(a: number, b: number, c: number): void;
export function __wbg_get_cliargs_dry_run(a: number): number;
export function __wbg_set_cliargs_dry_run(a: number, b: number): void;
export function __wbg_get_cliargs_init(a: number): number;
export function __wbg_set_cliargs_init(a: number, b: number): void;
export function __wbg_get_cliargs_force_init(a: number): number;
export function __wbg_set_cliargs_force_init(a: number, b: number): void;
export function __wbg_get_cliargs_private_key(a: number, b: number): void;
export function __wbg_set_cliargs_private_key(a: number, b: number, c: number): void;
export function __wbg_get_cliargs_allow_local_node_connections(a: number): number;
export function __wbg_set_cliargs_allow_local_node_connections(a: number, b: number): void;
export function __wbg_get_cliargs_allow_private_node_connections(a: number): number;
export function __wbg_set_cliargs_allow_private_node_connections(a: number, b: number): void;
export function __wbg_get_cliargs_max_parallel_connections(a: number, b: number): void;
export function __wbg_set_cliargs_max_parallel_connections(a: number, b: number, c: number): void;
export function __wbg_get_cliargs_test_announce_local_addresses(a: number): number;
export function __wbg_set_cliargs_test_announce_local_addresses(a: number, b: number): void;
export function __wbg_get_cliargs_test_prefer_local_addresses(a: number): number;
export function __wbg_set_cliargs_test_prefer_local_addresses(a: number, b: number): void;
export function __wbg_get_cliargs_test_use_weak_crypto(a: number): number;
export function __wbg_set_cliargs_test_use_weak_crypto(a: number, b: number): void;
export function __wbg_get_cliargs_test_no_direct_connections(a: number): number;
export function __wbg_set_cliargs_test_no_direct_connections(a: number, b: number): void;
export function __wbg_get_cliargs_test_no_webrtc_upgrade(a: number): number;
export function __wbg_set_cliargs_test_no_webrtc_upgrade(a: number, b: number): void;
export function __wbg_get_cliargs_no_relay(a: number): number;
export function __wbg_set_cliargs_no_relay(a: number, b: number): void;
export function __wbg_get_cliargs_test_local_mode_stun(a: number): number;
export function __wbg_set_cliargs_test_local_mode_stun(a: number, b: number): void;
export function __wbg_get_cliargs_heartbeat_interval(a: number, b: number): void;
export function __wbg_set_cliargs_heartbeat_interval(a: number, b: number, c: number): void;
export function __wbg_get_cliargs_heartbeat_threshold(a: number, b: number): void;
export function __wbg_set_cliargs_heartbeat_threshold(a: number, b: number, c: number): void;
export function __wbg_get_cliargs_heartbeat_variance(a: number, b: number): void;
export function __wbg_set_cliargs_heartbeat_variance(a: number, b: number, c: number): void;
export function __wbg_get_cliargs_on_chain_confirmations(a: number, b: number): void;
export function __wbg_set_cliargs_on_chain_confirmations(a: number, b: number, c: number): void;
export function __wbg_get_cliargs_network_quality_threshold(a: number, b: number): void;
export function __wbg_set_cliargs_network_quality_threshold(a: number, b: number, c: number): void;
export function __wbg_get_cliargs_configuration_file_path(a: number, b: number): void;
export function __wbg_set_cliargs_configuration_file_path(a: number, b: number, c: number): void;
export function hoprdconfig_as_redacted_string(a: number, b: number): void;
export function fetch_configuration(a: number, b: number): void;
export function hoprd_misc_initialize_crate(): void;
export function __wbg_host_free(a: number): void;
export function __wbg_api_free(a: number): void;
export function __wbg_get_api_enable(a: number): number;
export function __wbg_set_api_enable(a: number, b: number): void;
export function __wbg_get_api_host(a: number): number;
export function __wbg_set_api_host(a: number, b: number): void;
export function api_is_auth_disabled(a: number): number;
export function api_auth_token(a: number, b: number): void;
export function __wbg_healthcheck_free(a: number): void;
export function __wbg_get_healthcheck_enable(a: number): number;
export function __wbg_set_healthcheck_enable(a: number, b: number): void;
export function __wbg_get_healthcheck_port(a: number): number;
export function __wbg_set_healthcheck_port(a: number, b: number): void;
export function __wbg_heartbeat_free(a: number): void;
export function __wbg_get_heartbeat_interval(a: number): number;
export function __wbg_set_heartbeat_interval(a: number, b: number): void;
export function __wbg_get_heartbeat_threshold(a: number): number;
export function __wbg_set_heartbeat_threshold(a: number, b: number): void;
export function __wbg_get_heartbeat_variance(a: number): number;
export function __wbg_set_heartbeat_variance(a: number, b: number): void;
export function __wbg_networkoptions_free(a: number): void;
export function __wbg_get_networkoptions_announce(a: number): number;
export function __wbg_set_networkoptions_announce(a: number, b: number): void;
export function __wbg_get_networkoptions_allow_local_node_connections(a: number): number;
export function __wbg_set_networkoptions_allow_local_node_connections(a: number, b: number): void;
export function __wbg_get_networkoptions_allow_private_node_connections(a: number): number;
export function __wbg_set_networkoptions_allow_private_node_connections(a: number, b: number): void;
export function __wbg_get_networkoptions_network_quality_threshold(a: number): number;
export function __wbg_set_networkoptions_network_quality_threshold(a: number, b: number): void;
export function __wbg_get_networkoptions_no_relay(a: number): number;
export function __wbg_set_networkoptions_no_relay(a: number, b: number): void;
export function __wbg_chain_free(a: number): void;
export function __wbg_get_chain_provider(a: number, b: number): void;
export function __wbg_set_chain_provider(a: number, b: number, c: number): void;
export function __wbg_get_chain_check_unrealized_balance(a: number): number;
export function __wbg_set_chain_check_unrealized_balance(a: number, b: number): void;
export function __wbg_get_chain_on_chain_confirmations(a: number): number;
export function __wbg_set_chain_on_chain_confirmations(a: number, b: number): void;
export function __wbg_strategy_free(a: number): void;
export function __wbg_get_strategy_name(a: number, b: number): void;
export function __wbg_set_strategy_name(a: number, b: number, c: number): void;
export function __wbg_get_strategy_max_auto_channels(a: number, b: number): void;
export function __wbg_set_strategy_max_auto_channels(a: number, b: number, c: number): void;
export function __wbg_get_strategy_auto_redeem_tickets(a: number): number;
export function __wbg_set_strategy_auto_redeem_tickets(a: number, b: number): void;
export function __wbg_identity_free(a: number): void;
export function __wbg_get_identity_file(a: number, b: number): void;
export function __wbg_set_identity_file(a: number, b: number, c: number): void;
export function __wbg_get_identity_password(a: number, b: number): void;
export function __wbg_set_identity_password(a: number, b: number, c: number): void;
export function __wbg_db_free(a: number): void;
export function __wbg_get_db_data(a: number, b: number): void;
export function __wbg_set_db_data(a: number, b: number, c: number): void;
export function __wbg_get_db_initialize(a: number): number;
export function __wbg_set_db_initialize(a: number, b: number): void;
export function __wbg_get_db_force_initialize(a: number): number;
export function __wbg_set_db_force_initialize(a: number, b: number): void;
export function __wbg_testing_free(a: number): void;
export function __wbg_get_testing_announce_local_addresses(a: number): number;
export function __wbg_set_testing_announce_local_addresses(a: number, b: number): void;
export function __wbg_get_testing_prefer_local_addresses(a: number): number;
export function __wbg_set_testing_prefer_local_addresses(a: number, b: number): void;
export function __wbg_get_testing_use_weak_crypto(a: number): number;
export function __wbg_set_testing_use_weak_crypto(a: number, b: number): void;
export function __wbg_get_testing_no_direct_connections(a: number): number;
export function __wbg_set_testing_no_direct_connections(a: number, b: number): void;
export function __wbg_get_testing_no_webrtc_upgrade(a: number): number;
export function __wbg_set_testing_no_webrtc_upgrade(a: number, b: number): void;
export function __wbg_get_testing_local_mode_stun(a: number): number;
export function __wbg_set_testing_local_mode_stun(a: number, b: number): void;
export function __wbg_hoprdconfig_free(a: number): void;
export function __wbg_get_hoprdconfig_host(a: number): number;
export function __wbg_set_hoprdconfig_host(a: number, b: number): void;
export function __wbg_get_hoprdconfig_identity(a: number): number;
export function __wbg_set_hoprdconfig_identity(a: number, b: number): void;
export function __wbg_get_hoprdconfig_db(a: number): number;
export function __wbg_set_hoprdconfig_db(a: number, b: number): void;
export function __wbg_get_hoprdconfig_api(a: number): number;
export function __wbg_set_hoprdconfig_api(a: number, b: number): void;
export function __wbg_get_hoprdconfig_strategy(a: number): number;
export function __wbg_set_hoprdconfig_strategy(a: number, b: number): void;
export function __wbg_get_hoprdconfig_heartbeat(a: number): number;
export function __wbg_set_hoprdconfig_heartbeat(a: number, b: number): void;
export function __wbg_get_hoprdconfig_network_options(a: number): number;
export function __wbg_set_hoprdconfig_network_options(a: number, b: number): void;
export function __wbg_get_hoprdconfig_healthcheck(a: number): number;
export function __wbg_set_hoprdconfig_healthcheck(a: number, b: number): void;
export function __wbg_get_hoprdconfig_network(a: number, b: number): void;
export function __wbg_set_hoprdconfig_network(a: number, b: number, c: number): void;
export function __wbg_get_hoprdconfig_chain(a: number): number;
export function __wbg_set_hoprdconfig_chain(a: number, b: number): void;
export function __wbg_get_hoprdconfig_test(a: number): number;
export function __wbg_set_hoprdconfig_test(a: number, b: number): void;
export function __wbg_set_networkoptions_max_parallel_connections(a: number, b: number): void;
export function __wbg_get_host_port(a: number): number;
export function __wbg_get_networkoptions_max_parallel_connections(a: number): number;
export function __wbg_set_host_ip(a: number, b: number, c: number): void;
export function __wbg_set_healthcheck_host(a: number, b: number, c: number): void;
export function __wbg_get_host_ip(a: number, b: number): void;
export function __wbg_get_healthcheck_host(a: number, b: number): void;
export function __wbg_get_identity_private_key(a: number, b: number): void;
export function __wbg_set_host_port(a: number, b: number): void;
export function __wbg_set_identity_private_key(a: number, b: number, c: number): void;
export function parse_cli_arguments(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function core_ethereum_misc_initialize_crate(): void;
export function __wbg_coreethereumconstants_free(a: number): void;
export function __wbg_get_coreethereumconstants_DEFAULT_CONFIRMATIONS(a: number): number;
export function __wbg_get_coreethereumconstants_PROVIDER_CACHE_TTL(a: number): number;
export function __wbg_get_coreethereumconstants_TX_CONFIRMATION_WAIT(a: number): number;
export function __wbg_get_coreethereumconstants_INDEXER_BLOCK_RANGE(a: number): number;
export function __wbg_get_coreethereumconstants_INDEXER_TIMEOUT(a: number): number;
export function __wbg_get_coreethereumconstants_MAX_TRANSACTION_BACKOFF(a: number): number;
export function CORE_ETHEREUM_CONSTANTS(): number;
export function __wbg_wasmvecacknowledgedticket_free(a: number): void;
export function wasmvecacknowledgedticket_next(a: number): number;
export function __wbg_wasmvecchannelentry_free(a: number): void;
export function wasmvecchannelentry_next(a: number): number;
export function __wbg_wasmvecaccountentry_free(a: number): void;
export function wasmvecaccountentry_next(a: number): number;
export function __wbg_wasmvecpublickey_free(a: number): void;
export function wasmvecpublickey_next(a: number): number;
export function __wbg_database_free(a: number): void;
export function database_new(a: number, b: number): number;
export function database_get_acknowledged_tickets(a: number, b: number): number;
export function database_delete_acknowledged_tickets_from(a: number, b: number): number;
export function database_delete_acknowledged_ticket(a: number, b: number): number;
export function database_get_commitment(a: number, b: number, c: number): number;
export function database_get_current_commitment(a: number, b: number): number;
export function database_set_current_commitment(a: number, b: number, c: number): number;
export function database_get_latest_block_number(a: number): number;
export function database_update_latest_block_number(a: number, b: number): number;
export function database_get_latest_confirmed_snapshot(a: number): number;
export function database_get_channel(a: number, b: number): number;
export function database_get_channels(a: number): number;
export function database_get_channels_open(a: number): number;
export function database_update_channel_and_snapshot(a: number, b: number, c: number, d: number): number;
export function database_get_account(a: number, b: number): number;
export function database_update_account_and_snapshot(a: number, b: number, c: number): number;
export function database_get_accounts(a: number): number;
export function database_get_redeemed_tickets_value(a: number): number;
export function database_get_redeemed_tickets_count(a: number): number;
export function database_get_neglected_tickets_count(a: number): number;
export function database_get_pending_tickets_count(a: number): number;
export function database_get_losing_tickets_count(a: number): number;
export function database_get_pending_balance_to(a: number, b: number): number;
export function database_mark_pending(a: number, b: number): number;
export function database_resolve_pending(a: number, b: number, c: number): number;
export function database_mark_redeemed(a: number, b: number): number;
export function database_mark_losing_acked_ticket(a: number, b: number): number;
export function database_get_rejected_tickets_value(a: number): number;
export function database_get_rejected_tickets_count(a: number): number;
export function database_get_channel_x(a: number, b: number, c: number): number;
export function database_get_channel_to(a: number, b: number): number;
export function database_get_channel_from(a: number, b: number): number;
export function database_get_channels_from(a: number, b: number): number;
export function database_get_channels_to(a: number, b: number): number;
export function database_get_hopr_balance(a: number): number;
export function database_set_hopr_balance(a: number, b: number): number;
export function database_add_hopr_balance(a: number, b: number, c: number): number;
export function database_sub_hopr_balance(a: number, b: number, c: number): number;
export function database_is_network_registry_enabled(a: number): number;
export function database_set_network_registry(a: number, b: number, c: number): number;
export function database_add_to_network_registry(a: number, b: number, c: number, d: number): number;
export function database_remove_from_network_registry(a: number, b: number, c: number, d: number): number;
export function database_get_account_from_network_registry(a: number, b: number): number;
export function database_find_hopr_node_using_account_in_network_registry(a: number, b: number): number;
export function database_is_eligible(a: number, b: number): number;
export function database_set_eligible(a: number, b: number, c: number, d: number): number;
export function core_ethereum_db_initialize_crate(): void;
export function db_sanity_test(a: number): number;
export function core_network_initialize_crate(): void;
export function passivestrategy__new(): number;
export function passivestrategy_name(a: number, b: number): void;
export function passivestrategy_tick(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function promiscuousstrategy__new(): number;
export function promiscuousstrategy_name(a: number, b: number): void;
export function promiscuousstrategy_tick(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function randomstrategy__new(): number;
export function randomstrategy_name(a: number, b: number): void;
export function randomstrategy_tick(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function __wbg_passivestrategy_free(a: number): void;
export function __wbg_randomstrategy_free(a: number): void;
export function __wbg_promiscuousstrategy_free(a: number): void;
export function __wbg_get_promiscuousstrategy_network_quality_threshold(a: number): number;
export function __wbg_set_promiscuousstrategy_network_quality_threshold(a: number, b: number): void;
export function __wbg_get_promiscuousstrategy_new_channel_stake(a: number): number;
export function __wbg_set_promiscuousstrategy_new_channel_stake(a: number, b: number): void;
export function __wbg_get_promiscuousstrategy_minimum_channel_balance(a: number): number;
export function __wbg_set_promiscuousstrategy_minimum_channel_balance(a: number, b: number): void;
export function __wbg_get_promiscuousstrategy_minimum_node_balance(a: number): number;
export function __wbg_set_promiscuousstrategy_minimum_node_balance(a: number, b: number): void;
export function __wbg_get_promiscuousstrategy_max_channels(a: number, b: number): void;
export function __wbg_set_promiscuousstrategy_max_channels(a: number, b: number, c: number): void;
export function __wbg_get_promiscuousstrategy_auto_redeem_tickets(a: number): number;
export function __wbg_set_promiscuousstrategy_auto_redeem_tickets(a: number, b: number): void;
export function __wbg_get_promiscuousstrategy_enforce_max_channels(a: number): number;
export function __wbg_set_promiscuousstrategy_enforce_max_channels(a: number, b: number): void;
export function __wbg_strategytickresult_free(a: number): void;
export function strategytickresult_new(a: number, b: number, c: number, d: number, e: number): void;
export function strategytickresult_max_auto_channels(a: number): number;
export function strategytickresult_to_open(a: number, b: number): void;
export function strategytickresult_to_close(a: number, b: number): void;
export function core_strategy_initialize_crate(): void;
export function __wbg_channelentry_free(a: number): void;
export function __wbg_get_channelentry_source(a: number): number;
export function __wbg_set_channelentry_source(a: number, b: number): void;
export function __wbg_get_channelentry_destination(a: number): number;
export function __wbg_set_channelentry_destination(a: number, b: number): void;
export function __wbg_get_channelentry_balance(a: number): number;
export function __wbg_set_channelentry_balance(a: number, b: number): void;
export function __wbg_get_channelentry_commitment(a: number): number;
export function __wbg_set_channelentry_commitment(a: number, b: number): void;
export function __wbg_get_channelentry_ticket_epoch(a: number): number;
export function __wbg_set_channelentry_ticket_epoch(a: number, b: number): void;
export function __wbg_get_channelentry_ticket_index(a: number): number;
export function __wbg_set_channelentry_ticket_index(a: number, b: number): void;
export function __wbg_get_channelentry_status(a: number): number;
export function __wbg_set_channelentry_status(a: number, b: number): void;
export function __wbg_get_channelentry_channel_epoch(a: number): number;
export function __wbg_set_channelentry_channel_epoch(a: number, b: number): void;
export function __wbg_get_channelentry_closure_time(a: number): number;
export function __wbg_set_channelentry_closure_time(a: number, b: number): void;
export function channelentry_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function channelentry_get_id(a: number): number;
export function channelentry_closure_time_passed(a: number): number;
export function channelentry_remaining_closure_time(a: number, b: number): void;
export function generate_channel_id(a: number, b: number): number;
export function __wbg_ticket_free(a: number): void;
export function __wbg_get_ticket_counterparty(a: number): number;
export function __wbg_set_ticket_counterparty(a: number, b: number): void;
export function __wbg_get_ticket_challenge(a: number): number;
export function __wbg_set_ticket_challenge(a: number, b: number): void;
export function __wbg_get_ticket_epoch(a: number): number;
export function __wbg_set_ticket_epoch(a: number, b: number): void;
export function __wbg_get_ticket_amount(a: number): number;
export function __wbg_set_ticket_amount(a: number, b: number): void;
export function __wbg_get_ticket_signature(a: number): number;
export function __wbg_set_ticket_signature(a: number, b: number): void;
export function ticket_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function ticket_set_challenge(a: number, b: number, c: number, d: number): void;
export function ticket_sign(a: number, b: number, c: number): void;
export function ticket_new_zero_hop(a: number, b: number, c: number): number;
export function ticket_serialize_unsigned(a: number, b: number): void;
export function ticket_get_hash(a: number): number;
export function ticket_get_luck(a: number, b: number, c: number): number;
export function ticket_is_winning(a: number, b: number, c: number, d: number): number;
export function ticket_get_path_position(a: number, b: number, c: number): number;
export function __wbg_set_ticket_index(a: number, b: number): void;
export function __wbg_set_ticket_win_prob(a: number, b: number): void;
export function __wbg_set_ticket_channel_epoch(a: number, b: number): void;
export function __wbg_get_ticket_index(a: number): number;
export function __wbg_get_ticket_win_prob(a: number): number;
export function __wbg_get_ticket_channel_epoch(a: number): number;
export function __wbg_acknowledgement_free(a: number): void;
export function __wbg_get_acknowledgement_ack_key_share(a: number): number;
export function __wbg_set_acknowledgement_ack_key_share(a: number, b: number): void;
export function acknowledgement_new(a: number, b: number, c: number, d: number): number;
export function acknowledgement_validate(a: number, b: number, c: number): number;
export function acknowledgement_ack_challenge(a: number): number;
export function __wbg_acknowledgedticket_free(a: number): void;
export function __wbg_get_acknowledgedticket_ticket(a: number): number;
export function __wbg_set_acknowledgedticket_ticket(a: number, b: number): void;
export function __wbg_get_acknowledgedticket_response(a: number): number;
export function __wbg_set_acknowledgedticket_response(a: number, b: number): void;
export function __wbg_get_acknowledgedticket_pre_image(a: number): number;
export function __wbg_set_acknowledgedticket_pre_image(a: number, b: number): void;
export function __wbg_get_acknowledgedticket_signer(a: number): number;
export function __wbg_set_acknowledgedticket_signer(a: number, b: number): void;
export function acknowledgedticket_new(a: number, b: number, c: number, d: number): number;
export function acknowledgedticket_set_preimage(a: number, b: number): void;
export function __wbg_unacknowledgedticket_free(a: number): void;
export function __wbg_get_unacknowledgedticket_ticket(a: number): number;
export function __wbg_set_unacknowledgedticket_ticket(a: number, b: number): void;
export function __wbg_get_unacknowledgedticket_own_key(a: number): number;
export function __wbg_set_unacknowledgedticket_own_key(a: number, b: number): void;
export function __wbg_get_unacknowledgedticket_signer(a: number): number;
export function __wbg_set_unacknowledgedticket_signer(a: number, b: number): void;
export function unacknowledgedticket_new(a: number, b: number, c: number): number;
export function unacknowledgedticket_get_challenge(a: number): number;
export function __wbg_acknowledgementchallenge_free(a: number): void;
export function __wbg_get_acknowledgementchallenge_ack_challenge(a: number): number;
export function __wbg_set_acknowledgementchallenge_ack_challenge(a: number, b: number): void;
export function __wbg_get_acknowledgementchallenge_signature(a: number): number;
export function __wbg_set_acknowledgementchallenge_signature(a: number, b: number): void;
export function acknowledgementchallenge_new(a: number, b: number, c: number): number;
export function acknowledgementchallenge_solve(a: number, b: number, c: number): number;
export function acknowledgementchallenge_verify(a: number, b: number, c: number): number;
export function acknowledgementchallenge_validate(a: number, b: number, c: number): number;
export function core_types_initialize_crate(): void;
export function __wbg_accountentry_free(a: number): void;
export function __wbg_get_accountentry_public_key(a: number): number;
export function __wbg_set_accountentry_public_key(a: number, b: number): void;
export function accountentry_get_address(a: number): number;
export function accountentry_get_peer_id_str(a: number, b: number): void;
export function accountentry_get_multiaddress_str(a: number, b: number): void;
export function accountentry_updated_at(a: number, b: number): void;
export function accountentry_has_announced(a: number): number;
export function accountentry_contains_routing_info(a: number): number;
export function __wbg_pendingacknowledgement_free(a: number): void;
export function pendingacknowledgement_new(a: number, b: number): number;
export function pendingacknowledgement_is_msg_sender(a: number): number;
export function pendingacknowledgement_ticket(a: number): number;
export function pendingacknowledgement_deserialize(a: number, b: number, c: number): void;
export function pendingacknowledgement_serialize(a: number, b: number): void;
export function unacknowledgedticket_deserialize(a: number, b: number, c: number): void;
export function unacknowledgedticket_serialize(a: number, b: number): void;
export function unacknowledgedticket_get_response(a: number, b: number, c: number): void;
export function unacknowledgedticket_verify_challenge(a: number, b: number, c: number): void;
export function unacknowledgedticket_eq(a: number, b: number): number;
export function unacknowledgedticket_clone(a: number): number;
export function acknowledgedticket_deserialize(a: number, b: number, c: number): void;
export function acknowledgedticket_serialize(a: number, b: number): void;
export function acknowledgedticket_eq(a: number, b: number): number;
export function acknowledgedticket_verify(a: number, b: number, c: number): void;
export function acknowledgedticket_clone(a: number): number;
export function acknowledgedticket_size(): number;
export function acknowledgementchallenge_deserialize(a: number, b: number, c: number): void;
export function acknowledgementchallenge_serialize(a: number, b: number): void;
export function acknowledgementchallenge_eq(a: number, b: number): number;
export function acknowledgementchallenge_clone(a: number): number;
export function acknowledgementchallenge_size(): number;
export function acknowledgement_deserialize(a: number, b: number, c: number): void;
export function acknowledgement_serialize(a: number, b: number): void;
export function acknowledgement_eq(a: number, b: number): number;
export function acknowledgement_clone(a: number): number;
export function acknowledgement_size(): number;
export function unacknowledgedticket_size(): number;
export function channel_status_to_number(a: number): number;
export function number_to_channel_status(a: number): number;
export function channel_status_to_string(a: number, b: number): void;
export function ethereum_signed_hash(a: number): number;
export function channelentry_deserialize(a: number, b: number, c: number): void;
export function channelentry_serialize(a: number, b: number): void;
export function channelentry_eq(a: number, b: number): number;
export function channelentry_clone(a: number): number;
export function channelentry_size(): number;
export function ticket__new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function ticket_recover_signer(a: number, b: number): void;
export function ticket_verify(a: number, b: number, c: number): void;
export function ticket_deserialize(a: number, b: number, c: number): void;
export function ticket_serialize(a: number, b: number): void;
export function ticket_to_hex(a: number, b: number): void;
export function ticket_eq(a: number, b: number): number;
export function ticket_clone(a: number): number;
export function ticket_size(): number;
export function accountentry__new(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function accountentry_serialize(a: number, b: number): void;
export function accountentry_deserialize(a: number, b: number, c: number): void;
export function accountentry_clone(a: number): number;
export function accountentry_size(): number;
export function __wbg_curvepoint_free(a: number): void;
export function curvepoint_to_address(a: number): number;
export function __wbg_challenge_free(a: number): void;
export function __wbg_get_challenge_curve_point(a: number): number;
export function __wbg_set_challenge_curve_point(a: number, b: number): void;
export function challenge_to_ethereum_challenge(a: number): number;
export function __wbg_halfkey_free(a: number): void;
export function halfkey_new(a: number, b: number): number;
export function halfkey_to_challenge(a: number): number;
export function __wbg_halfkeychallenge_free(a: number): void;
export function halfkeychallenge_new(a: number, b: number): number;
export function halfkeychallenge_to_address(a: number): number;
export function hash_new(a: number, b: number): number;
export function hash_hash(a: number): number;
export function __wbg_offchainpublickey_free(a: number): void;
export function offchainpublickey_random(): number;
export function __wbg_publickey_free(a: number): void;
export function publickey_random(): number;
export function publickey_to_address(a: number): number;
export function publickey_to_bytes(a: number, b: number, c: number): void;
export function publickey_to_hex(a: number, b: number, c: number): void;
export function response_new(a: number, b: number): number;
export function response_to_challenge(a: number): number;
export function __wbg_signature_free(a: number): void;
export function signature_new(a: number, b: number, c: number): number;
export function signature_sign_message(a: number, b: number, c: number, d: number): number;
export function signature_sign_hash(a: number, b: number, c: number, d: number): number;
export function signature_verify_message(a: number, b: number, c: number, d: number, e: number): number;
export function signature_verify_message_with_pubkey(a: number, b: number, c: number, d: number): number;
export function signature_verify_hash(a: number, b: number, c: number, d: number, e: number): number;
export function signature_verify_hash_with_pubkey(a: number, b: number, c: number, d: number): number;
export function signature_raw_signature(a: number, b: number): void;
export function __wbg_hash_free(a: number): void;
export function __wbg_response_free(a: number): void;
export function derive_own_key_share(a: number, b: number): number;
export function derive_ack_key_share(a: number, b: number): number;
export function derive_packet_tag(a: number, b: number, c: number): void;
export function derive_commitment_seed(a: number, b: number, c: number, d: number, e: number): void;
export function derive_mac_key(a: number, b: number, c: number): void;
export function __wbg_groupelement_free(a: number): void;
export function groupelement_random(): number;
export function groupelement_coefficient(a: number): number;
export function groupelement_element(a: number): number;
export function random_bounded_integer(a: number, b: number): void;
export function random_big_integer(a: number, b: number, c: number, d: number): void;
export function random_integer(a: number, b: number, c: number, d: number): void;
export function random_fill(a: number, b: number, c: number): void;
export function random_float(): number;
export function prgparameters_key(a: number, b: number): void;
export function prgparameters_iv(a: number, b: number): void;
export function prg_digest(a: number, b: number, c: number, d: number): void;
export function __wbg_intermediate_free(a: number): void;
export function __wbg_get_intermediate_iteration(a: number): number;
export function __wbg_set_intermediate_iteration(a: number, b: number): void;
export function __wbg_get_intermediate_intermediate(a: number, b: number): void;
export function __wbg_set_intermediate_intermediate(a: number, b: number, c: number): void;
export function curvepoint_from_exponent(a: number, b: number, c: number): void;
export function curvepoint_from_str(a: number, b: number, c: number): void;
export function curvepoint_from_peerid_str(a: number, b: number, c: number): void;
export function curvepoint_to_peerid_str(a: number, b: number): void;
export function curvepoint_deserialize(a: number, b: number, c: number): void;
export function curvepoint_to_hex(a: number, b: number): void;
export function curvepoint_serialize(a: number, b: number): void;
export function curvepoint_serialize_compressed(a: number, b: number): void;
export function curvepoint_eq(a: number, b: number): number;
export function curvepoint_clone(a: number): number;
export function curvepoint_size(): number;
export function challenge_from_hint_and_share(a: number, b: number, c: number): void;
export function challenge_from_own_share_and_half_key(a: number, b: number, c: number): void;
export function challenge_deserialize(a: number, b: number, c: number): void;
export function challenge_to_hex(a: number, b: number): void;
export function challenge_serialize(a: number, b: number): void;
export function challenge_clone(a: number): number;
export function challenge_size(): number;
export function halfkey_deserialize(a: number, b: number, c: number): void;
export function halfkey_to_hex(a: number, b: number): void;
export function halfkey_serialize(a: number, b: number): void;
export function halfkey_clone(a: number): number;
export function halfkey_eq(a: number, b: number): number;
export function halfkey_size(): number;
export function halfkeychallenge_to_hex(a: number, b: number): void;
export function halfkeychallenge_eq(a: number, b: number): number;
export function halfkeychallenge_to_peerid_str(a: number, b: number): void;
export function halfkeychallenge_from_str(a: number, b: number, c: number): void;
export function halfkeychallenge_from_peerid_str(a: number, b: number, c: number): void;
export function halfkeychallenge_deserialize(a: number, b: number, c: number): void;
export function halfkeychallenge_serialize(a: number, b: number): void;
export function halfkeychallenge_clone(a: number): number;
export function hash_create(a: number, b: number): number;
export function hash_deserialize(a: number, b: number, c: number): void;
export function hash_to_hex(a: number, b: number): void;
export function hash_serialize(a: number, b: number): void;
export function hash_eq(a: number, b: number): number;
export function hash_clone(a: number): number;
export function offchainpublickey_deserialize(a: number, b: number, c: number): void;
export function offchainpublickey_serialize(a: number, b: number): void;
export function offchainpublickey_from_peerid_str(a: number, b: number, c: number): void;
export function offchainpublickey_to_peerid_str(a: number, b: number): void;
export function offchainpublickey_from_privkey(a: number, b: number, c: number): void;
export function offchainpublickey_eq(a: number, b: number): number;
export function offchainpublickey_clone(a: number): number;
export function __wbg_keypair_free(a: number): void;
export function __wbg_get_keypair_private(a: number, b: number): void;
export function __wbg_set_keypair_private(a: number, b: number, c: number): void;
export function __wbg_get_keypair_public(a: number): number;
export function __wbg_set_keypair_public(a: number, b: number): void;
export function publickey_random_keypair(): number;
export function publickey_deserialize(a: number, b: number, c: number): void;
export function publickey_serialize(a: number, b: number, c: number): void;
export function publickey_from_peerid_str(a: number, b: number, c: number): void;
export function publickey_to_peerid_str(a: number, b: number): void;
export function publickey_from_signature(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function publickey_from_privkey(a: number, b: number, c: number): void;
export function publickey_eq(a: number, b: number): number;
export function publickey_clone(a: number): number;
export function response_deserialize(a: number, b: number, c: number): void;
export function response_serialize(a: number, b: number): void;
export function response_to_hex(a: number, b: number): void;
export function response_from_half_keys(a: number, b: number, c: number): void;
export function response_clone(a: number): number;
export function signature_deserialize(a: number, b: number, c: number): void;
export function signature_to_hex(a: number, b: number): void;
export function signature_serialize(a: number, b: number): void;
export function signature_clone(a: number): number;
export function signature_size(): number;
export function halfkeychallenge_size(): number;
export function hash_size(): number;
export function offchainpublickey_size(): number;
export function publickey_size_compressed(): number;
export function publickey_size_uncompressed(): number;
export function response_size(): number;
export function __wbg_sharedkeys_free(a: number): void;
export function __wbg_iteratedhash_free(a: number): void;
export function iteratedhash_hash(a: number, b: number): void;
export function iteratedhash_count_intermediates(a: number): number;
export function iteratedhash_intermediate(a: number, b: number): number;
export function iterate_hash(a: number, b: number, c: number, d: number): number;
export function recover_iterated_hash(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function calculate_mac(a: number, b: number, c: number, d: number, e: number): void;
export function create_tagged_mac(a: number, b: number, c: number, d: number, e: number): void;
export function sharedkeys_get_alpha(a: number): number;
export function sharedkeys_get_peer_shared_key(a: number, b: number): number;
export function sharedkeys_count_shared_keys(a: number): number;
export function sharedkeys_forward_transform(a: number, b: number, c: number, d: number, e: number): void;
export function sharedkeys_generate(a: number, b: number, c: number): void;
export function prpparameters_key(a: number, b: number): void;
export function prpparameters_iv(a: number, b: number): void;
export function prp_forward(a: number, b: number, c: number, d: number): void;
export function prp_inverse(a: number, b: number, c: number, d: number): void;
export function core_crypto_initialize_crate(): void;
export function __wbg_prpparameters_free(a: number): void;
export function prpparameters_new(a: number, b: number): number;
export function __wbg_prp_free(a: number): void;
export function prp_new(a: number, b: number, c: number, d: number): number;
export function prp_from_parameters(a: number): number;
export function __wbg_prgparameters_free(a: number): void;
export function prgparameters_new(a: number, b: number): number;
export function __wbg_prg_free(a: number): void;
export function prg_new(a: number, b: number, c: number, d: number): number;
export function prg_from_parameters(a: number): number;
export function __wbg_address_free(a: number): void;
export function address_new(a: number, b: number): number;
export function address_to_bytes32(a: number, b: number): void;
export function address_to_string(a: number, b: number): void;
export function __wbg_balance_free(a: number): void;
export function balance_from_str(a: number, b: number, c: number): number;
export function balance_zero(a: number): number;
export function balance_balance_type(a: number): number;
export function balance_of_same(a: number, b: number, c: number): number;
export function balance_serialize_value(a: number, b: number): void;
export function balance_lt(a: number, b: number): number;
export function balance_lte(a: number, b: number): number;
export function balance_gt(a: number, b: number): number;
export function balance_gte(a: number, b: number): number;
export function balance_add(a: number, b: number): number;
export function balance_iadd(a: number, b: number): number;
export function balance_sub(a: number, b: number): number;
export function balance_isub(a: number, b: number): number;
export function balance_mul(a: number, b: number): number;
export function balance_imul(a: number, b: number): number;
export function ethereumchallenge_new(a: number, b: number): number;
export function __wbg_snapshot_free(a: number): void;
export function __wbg_get_snapshot_block_number(a: number): number;
export function __wbg_set_snapshot_block_number(a: number, b: number): void;
export function __wbg_get_snapshot_transaction_index(a: number): number;
export function __wbg_set_snapshot_transaction_index(a: number, b: number): void;
export function __wbg_get_snapshot_log_index(a: number): number;
export function __wbg_set_snapshot_log_index(a: number, b: number): void;
export function snapshot_new(a: number, b: number, c: number): number;
export function __wbg_u256_free(a: number): void;
export function u256_new(a: number, b: number): number;
export function u256_zero(): number;
export function u256_one(): number;
export function u256_as_u32(a: number): number;
export function u256_as_u64(a: number): number;
export function u256_addn(a: number, b: number): number;
export function u256_muln(a: number, b: number): number;
export function balance_amount(a: number): number;
export function __wbg_ethereumchallenge_free(a: number): void;
export function address_from_string(a: number, b: number, c: number): void;
export function address_deserialize(a: number, b: number, c: number): void;
export function address_to_hex(a: number, b: number): void;
export function address_serialize(a: number, b: number): void;
export function address_eq(a: number, b: number): number;
export function address_clone(a: number): number;
export function address_size(): number;
export function balance_deserialize(a: number, b: number, c: number, d: number): void;
export function balance_to_formatted_string(a: number, b: number): void;
export function balance_eq(a: number, b: number): number;
export function balance_clone(a: number): number;
export function balance_to_string(a: number, b: number): void;
export function balance_size(): number;
export function ethereumchallenge_deserialize(a: number, b: number, c: number): void;
export function ethereumchallenge_serialize(a: number, b: number): void;
export function ethereumchallenge_to_hex(a: number, b: number): void;
export function ethereumchallenge_eq(a: number, b: number): number;
export function ethereumchallenge_clone(a: number): number;
export function snapshot_deserialize(a: number, b: number, c: number): void;
export function snapshot_serialize(a: number, b: number): void;
export function snapshot_clone(a: number): number;
export function snapshot_size(): number;
export function u256_from(a: number): number;
export function u256_deserialize(a: number, b: number, c: number): void;
export function u256_serialize(a: number, b: number): void;
export function u256_to_hex(a: number, b: number): void;
export function u256_from_inverse_probability(a: number, b: number): void;
export function u256_to_string(a: number, b: number): void;
export function u256_eq(a: number, b: number): number;
export function u256_cmp(a: number, b: number): number;
export function u256_clone(a: number): number;
export function ethereumchallenge_size(): number;
export function u256_size(): number;
export function utils_types_initialize_crate(): void;
export function utils_log_initialize_crate(): void;
export function __wbg_chainoptions_free(a: number): void;
export function __wbg_get_chainoptions_id(a: number, b: number): void;
export function __wbg_set_chainoptions_id(a: number, b: number, c: number): void;
export function __wbg_get_chainoptions_description(a: number, b: number): void;
export function __wbg_set_chainoptions_description(a: number, b: number, c: number): void;
export function __wbg_get_chainoptions_chain_id(a: number): number;
export function __wbg_set_chainoptions_chain_id(a: number, b: number): void;
export function __wbg_get_chainoptions_live(a: number): number;
export function __wbg_set_chainoptions_live(a: number, b: number): void;
export function __wbg_get_chainoptions_default_provider(a: number, b: number): void;
export function __wbg_set_chainoptions_default_provider(a: number, b: number, c: number): void;
export function __wbg_get_chainoptions_etherscan_api_url(a: number, b: number): void;
export function __wbg_set_chainoptions_etherscan_api_url(a: number, b: number, c: number): void;
export function __wbg_get_chainoptions_max_fee_per_gas(a: number, b: number): void;
export function __wbg_set_chainoptions_max_fee_per_gas(a: number, b: number, c: number): void;
export function __wbg_get_chainoptions_max_priority_fee_per_gas(a: number, b: number): void;
export function __wbg_set_chainoptions_max_priority_fee_per_gas(a: number, b: number, c: number): void;
export function __wbg_get_chainoptions_native_token_name(a: number, b: number): void;
export function __wbg_set_chainoptions_native_token_name(a: number, b: number, c: number): void;
export function __wbg_get_chainoptions_hopr_token_name(a: number, b: number): void;
export function __wbg_set_chainoptions_hopr_token_name(a: number, b: number, c: number): void;
export function __wbg_network_free(a: number): void;
export function __wbg_get_network_id(a: number, b: number): void;
export function __wbg_set_network_id(a: number, b: number, c: number): void;
export function __wbg_get_network_chain(a: number, b: number): void;
export function __wbg_set_network_chain(a: number, b: number, c: number): void;
export function __wbg_get_network_environment_type(a: number): number;
export function __wbg_set_network_environment_type(a: number, b: number): void;
export function __wbg_get_network_version_range(a: number, b: number): void;
export function __wbg_set_network_version_range(a: number, b: number, c: number): void;
export function __wbg_get_network_indexer_start_block_number(a: number): number;
export function __wbg_set_network_indexer_start_block_number(a: number, b: number): void;
export function __wbg_get_network_token_contract_address(a: number, b: number): void;
export function __wbg_set_network_token_contract_address(a: number, b: number, c: number): void;
export function __wbg_get_network_channels_contract_address(a: number, b: number): void;
export function __wbg_set_network_channels_contract_address(a: number, b: number, c: number): void;
export function __wbg_get_network_xhopr_contract_address(a: number, b: number): void;
export function __wbg_set_network_xhopr_contract_address(a: number, b: number, c: number): void;
export function __wbg_get_network_boost_contract_address(a: number, b: number): void;
export function __wbg_set_network_boost_contract_address(a: number, b: number, c: number): void;
export function __wbg_get_network_stake_contract_address(a: number, b: number): void;
export function __wbg_set_network_stake_contract_address(a: number, b: number, c: number): void;
export function __wbg_get_network_network_registry_proxy_contract_address(a: number, b: number): void;
export function __wbg_set_network_network_registry_proxy_contract_address(a: number, b: number, c: number): void;
export function __wbg_get_network_network_registry_contract_address(a: number, b: number): void;
export function __wbg_set_network_network_registry_contract_address(a: number, b: number, c: number): void;
export function __wbg_get_network_stake_season(a: number, b: number): void;
export function __wbg_set_network_stake_season(a: number, b: number, c: number): void;
export function __wbg_resolvednetwork_free(a: number): void;
export function __wbg_get_resolvednetwork_id(a: number, b: number): void;
export function __wbg_set_resolvednetwork_id(a: number, b: number, c: number): void;
export function __wbg_get_resolvednetwork_chain(a: number): number;
export function __wbg_set_resolvednetwork_chain(a: number, b: number): void;
export function __wbg_get_resolvednetwork_environment_type(a: number): number;
export function __wbg_set_resolvednetwork_environment_type(a: number, b: number): void;
export function __wbg_get_resolvednetwork_channels_contract_address(a: number, b: number): void;
export function __wbg_set_resolvednetwork_channels_contract_address(a: number, b: number, c: number): void;
export function __wbg_set_resolvednetwork_channel_contract_deploy_block(a: number, b: number): void;
export function __wbg_get_resolvednetwork_channel_contract_deploy_block(a: number): number;
export function __wbg_set_resolvednetwork_token_contract_address(a: number, b: number, c: number): void;
export function __wbg_set_resolvednetwork_xhopr_contract_address(a: number, b: number, c: number): void;
export function __wbg_set_resolvednetwork_boost_contract_address(a: number, b: number, c: number): void;
export function __wbg_set_resolvednetwork_stake_contract_address(a: number, b: number, c: number): void;
export function __wbg_set_resolvednetwork_network_registry_proxy_contract_address(a: number, b: number, c: number): void;
export function __wbg_set_resolvednetwork_network_registry_contract_address(a: number, b: number, c: number): void;
export function __wbg_get_resolvednetwork_token_contract_address(a: number, b: number): void;
export function __wbg_get_resolvednetwork_xhopr_contract_address(a: number, b: number): void;
export function __wbg_get_resolvednetwork_boost_contract_address(a: number, b: number): void;
export function __wbg_get_resolvednetwork_stake_contract_address(a: number, b: number): void;
export function __wbg_get_resolvednetwork_network_registry_proxy_contract_address(a: number, b: number): void;
export function __wbg_get_resolvednetwork_network_registry_contract_address(a: number, b: number): void;
export function supported_networks(a: number, b: number, c: number): void;
export function resolve_network(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function core_misc_initialize_crate(): void;
export function __wbg_coreconstants_free(a: number): void;
export function __wbg_get_coreconstants_DEFAULT_HEARTBEAT_INTERVAL(a: number): number;
export function __wbg_get_coreconstants_DEFAULT_HEARTBEAT_THRESHOLD(a: number): number;
export function __wbg_get_coreconstants_DEFAULT_HEARTBEAT_INTERVAL_VARIANCE(a: number): number;
export function __wbg_get_coreconstants_DEFAULT_NETWORK_QUALITY_THRESHOLD(a: number): number;
export function __wbg_get_coreconstants_DEFAULT_MAX_PARALLEL_CONNECTIONS(a: number): number;
export function __wbg_get_coreconstants_DEFAULT_MAX_PARALLEL_CONNECTIONS_PUBLIC_RELAY(a: number): number;
export function CORE_CONSTANTS(): number;
export function utils_misc_initialize_crate(): void;
export function __wbg_iteratorresult_free(a: number): void;
export function __wbg_asynciterablehelper_free(a: number): void;
export function asynciterablehelper_next(a: number): number;
export function get_package_version(a: number, b: number, c: number): void;
export function dummy_get_one(a: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export const __wbindgen_export_3: WebAssembly.Table;
export function closure565_externref_shim(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__haeef42ce0f2a8d3f(a: number, b: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __externref_table_dealloc(a: number): void;
export function __wbindgen_free(a: number, b: number): void;
export function __externref_table_alloc(): number;
export function __externref_drop_slice(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
export function closure580_externref_shim(a: number, b: number, c: number, d: number): void;
export function __wbindgen_start(): void;
